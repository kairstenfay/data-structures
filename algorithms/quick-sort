#!/usr/bin/env python3
#
# An implementation of quicksort in python where the input is a list of
# integers.
#
from typing import List


def quicksort(input: List[int]) -> List[int]:
    """
    >>> quicksort([1,2,3])
    [1, 2, 3]

    # >>> quicksort([99])
    # [99]

    # >>> quicksort([])
    # []

    >>> quicksort([4,3,2,1])
    [1, 2, 3, 4]

    >>> quicksort([5,42,1,0,99])
    [0, 1, 5, 42, 99]
    """
    return _quicksort(input, 0, len(input) - 1)

def _quicksort(input: List[int], low: int, high: int) -> List[int]:
    """
    """
    if len(input) <= 1:
        # Input is already sorted
        return input

    result = input
    # Lomuto partitioning scheme
    if low < high:
        # Make a partition
        p_idx, result = partition(result, low, high)

        result = _quicksort(result, low, p_idx - 1)
        result = _quicksort(result, p_idx + 1, high)

    return result


def partition(input: List[int], low: int, high: int) -> tuple((int, List[int])):
    """ """
    pivot = input[high]
    i = low

    for j in range(low, high):
        if input[j] < pivot:
            # Swap input[i] and input[j]
            temp = input[i]
            input[i] = input[j]
            input[j] = temp
            i += 1

    # Swap input[i] and pivot
    temp = input[i]
    input[i] = input[high]
    input[high] = temp
    return i, input



if __name__ == "__main__":
    import doctest
    doctest.testmod()
