#!/usr/bin/env python3
#
# An implementation of a cyclic replacements problem in python where the in
# input is an array of integers.
#
from typing import List

def rotate(nums: List[int], k: int):
    """
    Rotate an list *nums* in place by *k* steps.
    >>> rotate([1,2,3,4,5,6,7], 3)
    [5, 6, 7, 1, 2, 3, 4]
    """
    start = 0
    rotations = 0
    n = len(nums)

    # Reduce rotation
    k %= n
    while rotations < n:
        idx = start
        prev = nums[start]

        while True:
            new_idx = (idx + k) % n
            temp = nums[new_idx]
            nums[new_idx] = prev
            prev = temp

            idx = new_idx
            rotations += 1

            # Check if we're back at beginning
            if idx == start:
                break
        start += 1

    print(nums)


if __name__ == "__main__":
    import doctest
    doctest.testmod()
